Successful nets:
Search strategy: RL_Search
Performance Predictor: Low_Fidelity
0
Sequential(
  (preprocess): Lambda()
  (Cons0): Conv2d(3, 16, kernel_size=(1, 1), stride=(1, 1))
  (ReLu0): ReLU()
  (Max_Pool1): MaxPool2d(kernel_size=5, stride=1, padding=1, dilation=1, ceil_mode=False)
  (Cons2): Conv2d(16, 24, kernel_size=(1, 1), stride=(1, 1))
  (ReLu2): ReLU()
  (Cons3): Conv2d(24, 16, kernel_size=(5, 5), stride=(1, 1))
  (ReLu3): ReLU()
  (postprocess): Lambda()
  (FC): Linear(in_features=10816, out_features=10, bias=True)
)
tensor(0.1000)
1
Sequential(
  (preprocess): Lambda()
  (Cons0): Conv2d(3, 16, kernel_size=(5, 5), stride=(1, 1))
  (ReLu0): ReLU()
  (Cons1): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
  (ReLu1): ReLU()
  (Cons2): Conv2d(16, 24, kernel_size=(1, 1), stride=(1, 1))
  (ReLu2): ReLU()
  (Cons3): Conv2d(24, 16, kernel_size=(1, 1), stride=(1, 1))
  (ReLu3): ReLU()
  (postprocess): Lambda()
  (FC): Linear(in_features=12544, out_features=10, bias=True)
)
tensor(0.2816)
2
Sequential(
  (preprocess): Lambda()
  (Cons0): Conv2d(3, 16, kernel_size=(1, 1), stride=(1, 1))
  (ReLu0): ReLU()
  (Cons1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(1, 1))
  (ReLu1): ReLU()
  (Cons2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
  (ReLu2): ReLU()
  (Cons3): Conv2d(16, 24, kernel_size=(1, 1), stride=(1, 1))
  (ReLu3): ReLU()
  (postprocess): Lambda()
  (FC): Linear(in_features=21600, out_features=10, bias=True)
)
tensor(0.1000)
3
Sequential(
  (preprocess): Lambda()
  (Cons0): Conv2d(3, 16, kernel_size=(1, 1), stride=(1, 1))
  (ReLu0): ReLU()
  (Cons1): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
  (ReLu1): ReLU()
  (Cons2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
  (ReLu2): ReLU()
  (Avg_Pool3): AvgPool2d(kernel_size=1, stride=1, padding=0)
  (postprocess): Lambda()
  (FC): Linear(in_features=16384, out_features=10, bias=True)
)
tensor(0.1000)
4
Sequential(
  (preprocess): Lambda()
  (Cons0): Conv2d(3, 16, kernel_size=(1, 1), stride=(1, 1))
  (ReLu0): ReLU()
  (Cons1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1))
  (ReLu1): ReLU()
  (Cons2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
  (ReLu2): ReLU()
  (Cons3): Conv2d(16, 24, kernel_size=(5, 5), stride=(1, 1), padding=(1, 1))
  (ReLu3): ReLU()
  (postprocess): Lambda()
  (FC): Linear(in_features=18816, out_features=10, bias=True)
)
tensor(0.1000)
5
Sequential(
  (preprocess): Lambda()
  (Cons0): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1))
  (ReLu0): ReLU()
  (Cons1): Conv2d(16, 24, kernel_size=(1, 1), stride=(1, 1))
  (ReLu1): ReLU()
  (Avg_Pool2): AvgPool2d(kernel_size=1, stride=1, padding=0)
  (Cons3): Conv2d(24, 16, kernel_size=(1, 1), stride=(1, 1))
  (ReLu3): ReLU()
  (postprocess): Lambda()
  (FC): Linear(in_features=14400, out_features=10, bias=True)
)
tensor(0.2694)
6
Sequential(
  (preprocess): Lambda()
  (Cons0): Conv2d(3, 16, kernel_size=(1, 1), stride=(1, 1))
  (ReLu0): ReLU()
  (Cons1): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
  (ReLu1): ReLU()
  (Cons2): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1))
  (ReLu2): ReLU()
  (Max_Pool3): MaxPool2d(kernel_size=5, stride=1, padding=0, dilation=1, ceil_mode=False)
  (postprocess): Lambda()
  (FC): Linear(in_features=9216, out_features=10, bias=True)
)
tensor(0.1000)
7
Sequential(
  (preprocess): Lambda()
  (Cons0): Conv2d(3, 16, kernel_size=(1, 1), stride=(1, 1))
  (ReLu0): ReLU()
  (Cons1): Conv2d(16, 24, kernel_size=(1, 1), stride=(1, 1))
  (ReLu1): ReLU()
  (Cons2): Conv2d(24, 16, kernel_size=(1, 1), stride=(1, 1))
  (ReLu2): ReLU()
  (Cons3): Conv2d(16, 24, kernel_size=(1, 1), stride=(1, 1))
  (ReLu3): ReLU()
  (postprocess): Lambda()
  (FC): Linear(in_features=24576, out_features=10, bias=True)
)
tensor(0.1000)
8
Sequential(
  (preprocess): Lambda()
  (Cons0): Conv2d(3, 16, kernel_size=(5, 5), stride=(1, 1))
  (ReLu0): ReLU()
  (Max_Pool1): MaxPool2d(kernel_size=1, stride=1, padding=0, dilation=1, ceil_mode=False)
  (Cons2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1))
  (ReLu2): ReLU()
  (Max_Pool3): MaxPool2d(kernel_size=5, stride=1, padding=1, dilation=1, ceil_mode=False)
  (postprocess): Lambda()
  (FC): Linear(in_features=9216, out_features=10, bias=True)
)
tensor(0.2606)
9
Sequential(
  (preprocess): Lambda()
  (Cons0): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1))
  (ReLu0): ReLU()
  (Avg_Pool1): AvgPool2d(kernel_size=1, stride=1, padding=0)
  (Cons2): Conv2d(16, 24, kernel_size=(1, 1), stride=(1, 1))
  (ReLu2): ReLU()
  (Max_Pool3): MaxPool2d(kernel_size=1, stride=1, padding=0, dilation=1, ceil_mode=False)
  (postprocess): Lambda()
  (FC): Linear(in_features=21600, out_features=10, bias=True)
)
tensor(0.2667)
10
Sequential(
  (preprocess): Lambda()
  (Cons0): Conv2d(3, 16, kernel_size=(1, 1), stride=(1, 1))
  (ReLu0): ReLU()
  (Cons1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1))
  (ReLu1): ReLU()
  (Cons2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
  (ReLu2): ReLU()
  (Cons3): Conv2d(16, 24, kernel_size=(1, 1), stride=(1, 1))
  (ReLu3): ReLU()
  (postprocess): Lambda()
  (FC): Linear(in_features=21600, out_features=10, bias=True)
)
tensor(0.2528)
11
Sequential(
  (preprocess): Lambda()
  (Cons0): Conv2d(3, 16, kernel_size=(1, 1), stride=(1, 1))
  (ReLu0): ReLU()
  (Cons1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1))
  (ReLu1): ReLU()
  (Max_Pool2): MaxPool2d(kernel_size=1, stride=1, padding=0, dilation=1, ceil_mode=False)
  (Cons3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
  (ReLu3): ReLU()
  (postprocess): Lambda()
  (FC): Linear(in_features=14400, out_features=10, bias=True)
)
tensor(0.1000)
12
Sequential(
  (preprocess): Lambda()
  (Cons0): Conv2d(3, 24, kernel_size=(1, 1), stride=(1, 1))
  (ReLu0): ReLU()
  (Cons1): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1))
  (ReLu1): ReLU()
  (Cons2): Conv2d(24, 16, kernel_size=(1, 1), stride=(1, 1))
  (ReLu2): ReLU()
  (Avg_Pool3): AvgPool2d(kernel_size=5, stride=1, padding=1)
  (postprocess): Lambda()
  (FC): Linear(in_features=14400, out_features=10, bias=True)
)
tensor(0.1000)
13
Sequential(
  (preprocess): Lambda()
  (Cons0): Conv2d(3, 16, kernel_size=(5, 5), stride=(3, 3))
  (ReLu0): ReLU()
  (Max_Pool1): MaxPool2d(kernel_size=1, stride=1, padding=0, dilation=1, ceil_mode=False)
  (Cons2): Conv2d(16, 36, kernel_size=(1, 1), stride=(1, 1))
  (ReLu2): ReLU()
  (Cons3): Conv2d(36, 16, kernel_size=(3, 3), stride=(1, 1))
  (ReLu3): ReLU()
  (postprocess): Lambda()
  (FC): Linear(in_features=1024, out_features=10, bias=True)
)
tensor(0.3826)
14
Sequential(
  (preprocess): Lambda()
  (Cons0): Conv2d(3, 24, kernel_size=(1, 1), stride=(1, 1))
  (ReLu0): ReLU()
  (Cons1): Conv2d(24, 16, kernel_size=(3, 3), stride=(1, 1))
  (ReLu1): ReLU()
  (Avg_Pool2): AvgPool2d(kernel_size=5, stride=1, padding=1)
  (Avg_Pool3): AvgPool2d(kernel_size=1, stride=1, padding=0)
  (postprocess): Lambda()
  (FC): Linear(in_features=12544, out_features=10, bias=True)
)
tensor(0.1000)
15
Sequential(
  (preprocess): Lambda()
  (Cons0): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (ReLu0): ReLU()
  (Max_Pool1): MaxPool2d(kernel_size=3, stride=1, padding=0, dilation=1, ceil_mode=False)
  (Cons2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (ReLu2): ReLU()
  (Cons3): Conv2d(16, 24, kernel_size=(1, 1), stride=(1, 1))
  (ReLu3): ReLU()
  (postprocess): Lambda()
  (FC): Linear(in_features=21600, out_features=10, bias=True)
)
tensor(0.2804)
16
Sequential(
  (preprocess): Lambda()
  (Cons0): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1))
  (ReLu0): ReLU()
  (Cons1): Conv2d(16, 24, kernel_size=(5, 5), stride=(1, 1), padding=(1, 1))
  (ReLu1): ReLU()
  (Cons2): Conv2d(24, 16, kernel_size=(1, 1), stride=(1, 1))
  (ReLu2): ReLU()
  (Avg_Pool3): AvgPool2d(kernel_size=1, stride=1, padding=0)
  (postprocess): Lambda()
  (FC): Linear(in_features=12544, out_features=10, bias=True)
)
tensor(0.1000)
17
Sequential(
  (preprocess): Lambda()
  (Cons0): Conv2d(3, 24, kernel_size=(5, 5), stride=(1, 1))
  (ReLu0): ReLU()
  (Cons1): Conv2d(24, 16, kernel_size=(1, 1), stride=(1, 1))
  (ReLu1): ReLU()
  (Cons2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
  (ReLu2): ReLU()
  (Cons3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
  (ReLu3): ReLU()
  (postprocess): Lambda()
  (FC): Linear(in_features=12544, out_features=10, bias=True)
)
